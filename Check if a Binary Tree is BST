public class Solution {

	public static boolean isBST(BinaryTreeNode<Integer> root) {

		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */
        
        
        if(root==null){
            return true;
        }
        int leftMax=maximum(root.left);
        int rightMin=minimum(root.right);
        if(root.data<=leftMax){
            return false;
        }
        if(root.data>rightMin){
            return false;
        }
        boolean isleftBST=isBST(root.left);
        boolean isrightBST=isBST(root.right);
        if(isleftBST && isrightBST){
            return true;
        }else{
            return false;
        }
        
        
        
        // if(root==null){
        //     return true;
        // }
        // if(root.left!=null && root.data<root.left.data){
        //     return false;
        // }
        // if(root.right!=null && root.data>root.right.data){
        //     return false;
        // }
        // if(!isBST(root.left) || !isBST(root.right)){
        //     return false;
        // }
        // return true;
        
	}
    public static int minimum(BinaryTreeNode<Integer> root){
        if(root==null){
            return Integer.MAX_VALUE;
        }
        return Math.min(root.data,Math.min(minimum(root.left),minimum(root.right)));
    }
    public static int maximum(BinaryTreeNode<Integer> root){
        if(root==null){
            return Integer.MIN_VALUE;
        }
        return Math.max(root.data,Math.max(maximum(root.left),maximum(root.right)));
    }
